{
  "version": 3,
  "sources": ["../../@vueuse/integrations/useCookies.mjs"],
  "sourcesContent": ["import { tryOnScopeDispose } from '@vueuse/shared';\nimport Cookie from 'universal-cookie';\nimport { shallowRef } from 'vue';\n\nfunction createCookies(req) {\n  const universalCookie = new Cookie(req ? req.headers.cookie : null);\n  return (dependencies, { doNotParse = false, autoUpdateDependencies = false } = {}) => /* @__PURE__ */ useCookies(dependencies, { doNotParse, autoUpdateDependencies }, universalCookie);\n}\n// @__NO_SIDE_EFFECTS__\nfunction useCookies(dependencies, { doNotParse = false, autoUpdateDependencies = false } = {}, cookies = new Cookie()) {\n  const watchingDependencies = autoUpdateDependencies ? [...dependencies || []] : dependencies;\n  let previousCookies = cookies.getAll({ doNotParse: true });\n  const touches = shallowRef(0);\n  const onChange = () => {\n    const newCookies = cookies.getAll({ doNotParse: true });\n    if (shouldUpdate(\n      watchingDependencies || null,\n      newCookies,\n      previousCookies\n    )) {\n      touches.value++;\n    }\n    previousCookies = newCookies;\n  };\n  cookies.addChangeListener(onChange);\n  tryOnScopeDispose(() => {\n    cookies.removeChangeListener(onChange);\n  });\n  return {\n    /**\n     * Reactive get cookie by name. If **autoUpdateDependencies = true** then it will update watching dependencies\n     */\n    get: (...args) => {\n      if (autoUpdateDependencies && watchingDependencies && !watchingDependencies.includes(args[0]))\n        watchingDependencies.push(args[0]);\n      touches.value;\n      return cookies.get(args[0], { doNotParse, ...args[1] });\n    },\n    /**\n     * Reactive get all cookies\n     */\n    getAll: (...args) => {\n      touches.value;\n      return cookies.getAll({ doNotParse, ...args[0] });\n    },\n    set: (...args) => cookies.set(...args),\n    remove: (...args) => cookies.remove(...args),\n    addChangeListener: (...args) => cookies.addChangeListener(...args),\n    removeChangeListener: (...args) => cookies.removeChangeListener(...args)\n  };\n}\nfunction shouldUpdate(dependencies, newCookies, oldCookies) {\n  if (!dependencies)\n    return true;\n  for (const dependency of dependencies) {\n    if (newCookies[dependency] !== oldCookies[dependency])\n      return true;\n  }\n  return false;\n}\n\nexport { createCookies, useCookies };\n"],
  "mappings": ";;;;;;;;;;AAIA,SAAS,cAAc,KAAK;AAC1B,QAAM,kBAAkB,IAAI,QAAO,MAAM,IAAI,QAAQ,SAAS,IAAI;AAClE,SAAO,CAAC,cAAc,EAAE,aAAa,OAAO,yBAAyB,MAAM,IAAI,CAAC,MAAsB,WAAW,cAAc,EAAE,YAAY,uBAAuB,GAAG,eAAe;AACxL;AAEA,SAAS,WAAW,cAAc,EAAE,aAAa,OAAO,yBAAyB,MAAM,IAAI,CAAC,GAAG,UAAU,IAAI,QAAO,GAAG;AACrH,QAAM,uBAAuB,yBAAyB,CAAC,GAAG,gBAAgB,CAAC,CAAC,IAAI;AAChF,MAAI,kBAAkB,QAAQ,OAAO,EAAE,YAAY,KAAK,CAAC;AACzD,QAAM,UAAU,WAAW,CAAC;AAC5B,QAAM,WAAW,MAAM;AACrB,UAAM,aAAa,QAAQ,OAAO,EAAE,YAAY,KAAK,CAAC;AACtD,QAAI;AAAA,MACF,wBAAwB;AAAA,MACxB;AAAA,MACA;AAAA,IACF,GAAG;AACD,cAAQ;AAAA,IACV;AACA,sBAAkB;AAAA,EACpB;AACA,UAAQ,kBAAkB,QAAQ;AAClC,oBAAkB,MAAM;AACtB,YAAQ,qBAAqB,QAAQ;AAAA,EACvC,CAAC;AACD,SAAO;AAAA;AAAA;AAAA;AAAA,IAIL,KAAK,IAAI,SAAS;AAChB,UAAI,0BAA0B,wBAAwB,CAAC,qBAAqB,SAAS,KAAK,CAAC,CAAC;AAC1F,6BAAqB,KAAK,KAAK,CAAC,CAAC;AACnC,cAAQ;AACR,aAAO,QAAQ,IAAI,KAAK,CAAC,GAAG,EAAE,YAAY,GAAG,KAAK,CAAC,EAAE,CAAC;AAAA,IACxD;AAAA;AAAA;AAAA;AAAA,IAIA,QAAQ,IAAI,SAAS;AACnB,cAAQ;AACR,aAAO,QAAQ,OAAO,EAAE,YAAY,GAAG,KAAK,CAAC,EAAE,CAAC;AAAA,IAClD;AAAA,IACA,KAAK,IAAI,SAAS,QAAQ,IAAI,GAAG,IAAI;AAAA,IACrC,QAAQ,IAAI,SAAS,QAAQ,OAAO,GAAG,IAAI;AAAA,IAC3C,mBAAmB,IAAI,SAAS,QAAQ,kBAAkB,GAAG,IAAI;AAAA,IACjE,sBAAsB,IAAI,SAAS,QAAQ,qBAAqB,GAAG,IAAI;AAAA,EACzE;AACF;AACA,SAAS,aAAa,cAAc,YAAY,YAAY;AAC1D,MAAI,CAAC;AACH,WAAO;AACT,aAAW,cAAc,cAAc;AACrC,QAAI,WAAW,UAAU,MAAM,WAAW,UAAU;AAClD,aAAO;AAAA,EACX;AACA,SAAO;AACT;",
  "names": []
}
